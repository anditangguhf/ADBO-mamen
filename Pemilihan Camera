Press the WASD or arrow keys to move. Drag with the left mouse button to rotate.

TestChaseCamera.java

TestCameraNode.java

Camera Node
To make the camera follow a target node, add this camera node code to your init method (e.g. simpleInitApp()). The target spatial is typically the player node.

// Disable the default flyby cam
flyCam.setEnabled(false);
//create the camera Node
camNode = new CameraNode("Camera Node", cam);
//This mode means that camera copies the movements of the target:
camNode.setControlDir(ControlDirection.SpatialToCamera);
//Attach the camNode to the target:
target.attachChild(camNode);
//Move camNode, e.g. behind and above the target:
camNode.setLocalTranslation(new Vector3f(0, 5, -5));
//Rotate the camNode to look at the target:
camNode.lookAt(target.getLocalTranslation(), Vector3f.UNIT_Y);
Where the example says camNode.setLocalTranslation(new Vector3f(0, 5, -5));, you have to supply your own start position for the camera. This depends on the size of your target (the player character) and its position in your particular scene. Optimally, you set this to a spot a bit behind and above the target.
Methods	Description
setControlDir(ControlDirection.SpatialToCamera)

User input steers the target spatial, and the camera follows the spatial.
The spatial’s transformation is copied over the camera’s transformation.
Example: Use with CharacterControlled spatial.

setControlDir(ControlDirection.CameraToSpatial)

User input steers the camera, and the target spatial follows the camera.
The camera’s transformation is copied over the spatial’s transformation. Use with first-person flyCam.

Code sample:

TestCameraNode.java – Press the WASD or arrow keys to move. Drag with the left mouse button to rotate.

Chase Camera
To activate the chase camera, add the following code to your init method (e.g. simpleInitApp()). The target spatial is typically the player node. You will be able to rotate the target by dragging (keeping the left mouse button pressed and moving the mouse).

// Disable the default flyby cam
flyCam.setEnabled(false);
// Enable a chase cam for this target (typically the player).
ChaseCamera chaseCam = new ChaseCamera(cam, target, inputManager);
chaseCam.setSmoothMotion(true);
Method	Description
setInvertVerticalAxis(true)

Invert the camera’s vertical rotation Axis

setInvertHorizontalAxis(true)

Invert the camera’s horizontal rotation Axis

setTrailingEnabled(true)

Camera follows the target and flies around and behind when the target moves towards the camera. Trailing only works with smooth motion enabled. (Default)

setTrailingEnabled(false)

Camera follows the target, but does not rotate around the target when the target changes direction.

setSmoothMotion(true)

Activate SmoothMotion when trailing. This means the camera seems to accelerate and fly after the character, when it has caught up, it slows down again.

setSmoothMotion(false)

Disable smooth camera motion. Disabling SmoothMotion also disables trailing.

setLookAtOffset(Vector3f.UNIT_Y.mult(3))

Camera looks at a point 3 world units above the target.

setToggleRotationTrigger(new MouseButtonTrigger(MouseInput.BUTTON_MIDDLE))

Enable rotation by keeping the middle mouse button pressed (like in Blender). This disables the rotation on right and left mouse button click.

setToggleRotationTrigger(new MouseButtonTrigger(
MouseInput.BUTTON_MIDDLE),
new KeyTrigger(KeyInput.KEY_SPACE))

Activate mutiple triggers for the rotation of the camera, e.g. spacebar and middle mouse button, etc.

setRotationSensitivity(5f)

How fast the camera rotates. Use values around <1.0f (all bigger values are ignored).

Code sample:

TestChaseCamera.java – Press the WASD or arrow keys to move. Drag with the left mouse button to rotate.
